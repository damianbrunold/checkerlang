# https://adventofcode.com/2021/day/15

# note: this is quite compute intensive and takes a very long time using the
# javascript based implementation, using the java or dotnet implementation,
# this script only runs for a couple seconds.

# The implementation uses the dijkstra algorithm to find the best route.
# For this, we also need a priority queue. This queue is implemented at the
# top using a combination of heap map (for getting the best element fast)
# and a hash map (for fast check of whether a given element is contained).

require IO import [read_file];
require List import [map_list, flatten];

def data = read_file("day15-input.txt") !> trim() !> lines() !> map_list(fn(line) [int(weight) for weight in line !> split("")]);

def create_empty_heap() do
    return <* heap = [], mapping=<<<>>> *>;
end;

def add_to_heap(heap, element) do
    def h = heap->heap;
    def m = heap->mapping;
    h !> append(element);
    m[element[0]] = length(h) - 1;
    def index = length(h) - 1;
    def parent = int((index - 1) / 2);
    while h[parent][1] > h[index][1] do
        def temp = h[parent];
        h[parent] = h[index];
        h[index] = temp;
        m[h[parent][0]] = parent;
        m[h[index][0]] = index;
        index = parent;
        if index == 0 then break;
        parent = int((index - 1) / 2);
    end;
end;

def extract_minimum_from_heap(heap) do
    def h = heap->heap;
    def m = heap->mapping;
    def result = h[0];
    if length(h) == 1 then do
        h !> delete_at(0);
        heap->mapping = <<<>>>;
    end else do
        m !> remove(result[0]);
        def last = h !> delete_at(length(h) - 1);
        h[0] = last;
        m[h[0][0]] = 0;
        def index = 0;
        def left = 2 * index + 1;
        def right = left + 1;
        def size = length(h);
        while TRUE do
            def min_index = index;
            def min_value = h[min_index][1];
            if left < size and min_value > h[left][1] then do
                min_index = left;
                min_value = h[left][1];
            end;
            if right < size and min_value > h[right][1] then do
                min_index = right;
            end;
            if min_index == index then break;

            def temp = h[index];
            h[index] = h[min_index];
            h[min_index] = temp;
            m[h[index][0]] = index;
            m[h[min_index][0]] = min_index;

            index = min_index;
            left = 2 * index + 1;
            right = left + 1;
        end;
    end;
    return result;
end;

def decrease_in_heap(heap, element) do
    def h = heap->heap;
    def m = heap->mapping;
    def index = m[element[0]];
    h[index][1] = element[1];
    if index > 0 then do
        def parent = int((index - 1) / 2);
        while h[parent][1] > h[index][1] do
            def temp = h[parent];
            h[parent] = h[index];
            h[index] = temp;
            m[h[parent][0]] = parent;
            m[h[index][0]] = index;
            index = parent;
            if index == 0 then break;
            parent = int((index - 1) / 2);
        end;
    end;
end;

def search_path(data) do
    def width = length(data[0]);
    def height = length(data);
    data = flatten(data);

    def idx(x, y) y * width + x;

    def neighbors(u) do
        def result = [];
        def x = u % width;
        def y = int(u / height);
        if x > 0 then result !> append(idx(x-1, y));
        if x < width-1 then result !> append(idx(x+1, y));
        if y > 0 then result !> append(idx(x, y-1));
        if y < height-1 then result !> append(idx(x, y+1));
        return result;
    end;

    def nbs = [];
    for u in range(length(data)) do
        nbs !> append(neighbors(u));
    end;

    # dijkstra algorithm for shortest path

    def source = idx(0, 0);
    def target = idx(width-1, height-1);
    def dist = [0] + [MAXINT] * (length(data)-1);
    def prev = [NULL] * length(data);
    def q = create_empty_heap();
    q !> add_to_heap([source, 0]);
    for u in range(1, length(data)) do
        q !> add_to_heap([u, MAXINT]);
    end;

    while length(q->heap) > 0 do
        def [u, d] = extract_minimum_from_heap(q);

        if u == target then do
            def s = [];
            if prev[u] != NULL or u == source then do
                while u != NULL do
                    s = [u] + s;
                    u = prev[u];
                end;
            end;
            return [data[u] for u in s];
        end;

        for v in nbs[u] do
            if not v in q->mapping then continue;
            def alt = dist[u] + data[v];
            if alt < dist[v] then do
                dist[v] = alt;
                prev[v] = u;
                decrease_in_heap(q, [v, alt]);
            end;
        end;
    end;
end;

println(sum(search_path(data)) - data[0][0]);

def expand_data(data) do
    def result = [row for row in data];
    for i in range(1, 5) do
        for row in data do
            result !> append([if n + i >= 10 then n + i - 9 else n + i for n in row]);
        end;
    end;
    for j in range(length(result)) do
        def newrow = [n for n in result[j]];
        for i in range(1, 5) do
            newrow += [if n + i >= 10 then n + i - 9 else n + i for n in result[j]];
        end;
        result[j] = newrow;
    end;
    return result;
end;

println(sum(search_path(expand_data(data))) - data[0][0]);

