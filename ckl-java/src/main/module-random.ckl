# Copyright (c) 2021 Damian Brunold, Gesundheitsdirektion Kanton ZÃ¼rich
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

bind_native("random");
bind_native("set_seed");

"
choice(lst)

Returns a random element from the list or set lst.

: choice([1, 1, 1, 1]) ==> 1
"
def choice(lst) list(lst)[random(length(lst))];


"
choices(lst, n)

Returns a list with n random elements from the list or set lst.
"
def choices(lst, n) do
  def lst_ = list(lst);
  [choice(lst_) for i in range(n)];
end;


"
sample(lst, n)

Returns a set with n random elements from the list or set lst,
without repetitions. Also works with a string.

: sample([1, 2, 3], 3) ==> <<1, 2, 3>>
: sample([1, 1, 1, 2, 2, 3], 3) ==> <<1, 2, 3>>
: sample('abc', 3) ==> <<'a', 'b', 'c'>>
"
def sample(lst, n) do
  if is_string(lst) then lst = split(lst, "");
  if length(set(lst)) < n then error "List must contain at least " + n + " unique elements";
  def result = <<>>;
  def lst_ = list(lst);
  def len = length(lst_);
  while length(result) < n do
    result !> append(lst_[random(len)]);
  end;
  return result;
end;
